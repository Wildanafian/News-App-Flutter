// Mocks generated by Mockito 5.4.4 from annotations
// in news_app_flutter/test/data/repository/bookmark_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:news_app_flutter/data/datasource/local/local_hive.dart' as _i2;
import 'package:news_app_flutter/data/model/ui/news_item.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocalBookmark].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalBookmark extends _i1.Mock implements _i2.LocalBookmark {
  MockLocalBookmark() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addBookmarkNews(_i4.NewsItem? newsItem) =>
      (super.noSuchMethod(
        Invocation.method(
          #addBookmarkNews,
          [newsItem],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.NewsItem>> getAllBookmarkedNews() => (super.noSuchMethod(
        Invocation.method(
          #getAllBookmarkedNews,
          [],
        ),
        returnValue: _i3.Future<List<_i4.NewsItem>>.value(<_i4.NewsItem>[]),
      ) as _i3.Future<List<_i4.NewsItem>>);

  @override
  _i3.Future<void> deleteBookmarkedNews(String? key) => (super.noSuchMethod(
        Invocation.method(
          #deleteBookmarkedNews,
          [key],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
